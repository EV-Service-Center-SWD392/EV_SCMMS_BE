// <auto-generated />
using System;
using EV_SCMMS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EV_SCMMS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251018152546_InitialDatabaseCreation")]
    partial class InitialDatabaseCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn", "phone" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "oauth_registration_type", new[] { "dynamic", "manual" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" });
            // NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "storage", "buckettype", new[] { "STANDARD", "ANALYTICS" });
            // NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            // NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            // NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            // NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            // NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.Center", b =>
                {
                    b.Property<Guid>("Centerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("centerid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'ACTIVE'::character varying");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Centerid")
                        .HasName("center_pkey");

                    b.ToTable("center", (string)null);
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.InventoryTuht", b =>
                {
                    b.Property<Guid>("Inventoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("inventoryid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("Centerid")
                        .HasColumnType("uuid")
                        .HasColumnName("centerid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<int?>("Minimumstocklevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("minimumstocklevel");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'ACTIVE'::character varying");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Inventoryid")
                        .HasName("inventory_tuht_pkey");

                    b.HasIndex("Centerid");

                    b.ToTable("inventory_tuht", (string)null);
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartTuht", b =>
                {
                    b.Property<Guid>("Sparepartid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("sparepartid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("Inventoryid")
                        .HasColumnType("uuid")
                        .HasColumnName("inventoryid");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Manufacture")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("manufacture");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'ACTIVE'::character varying");

                    b.Property<Guid?>("Typeid")
                        .HasColumnType("uuid")
                        .HasColumnName("typeid");

                    b.Property<decimal?>("Unitprice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unitprice");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Vehiclemodelid")
                        .HasColumnType("integer")
                        .HasColumnName("vehiclemodelid");

                    b.HasKey("Sparepartid")
                        .HasName("sparepart_tuht_pkey");

                    b.HasIndex("Inventoryid");

                    b.HasIndex("Typeid");

                    b.ToTable("sparepart_tuht", (string)null);
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartforecastTuht", b =>
                {
                    b.Property<Guid>("Forecastid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("forecastid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("Approvedby")
                        .HasColumnType("uuid")
                        .HasColumnName("approvedby");

                    b.Property<DateTime?>("Approveddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approveddate");

                    b.Property<Guid>("Centerid")
                        .HasColumnType("uuid")
                        .HasColumnName("centerid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("Forecastconfidence")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("forecastconfidence");

                    b.Property<DateTime?>("Forecastdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("forecastdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Forecastedby")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("forecastedby")
                        .HasDefaultValueSql("'AI'::character varying");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<int?>("Predictedusage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("predictedusage");

                    b.Property<int?>("Reorderpoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("reorderpoint");

                    b.Property<int?>("Safetystock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("safetystock");

                    b.Property<Guid>("Sparepartid")
                        .HasColumnType("uuid")
                        .HasColumnName("sparepartid");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'PENDING'::character varying");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Forecastid")
                        .HasName("sparepartforecast_tuht_pkey");

                    b.HasIndex("Centerid");

                    b.HasIndex("Sparepartid");

                    b.ToTable("sparepartforecast_tuht", (string)null);
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.Sparepartreplenishmentrequest", b =>
                {
                    b.Property<Guid>("Requestid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("requestid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Approvedat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approvedat");

                    b.Property<Guid?>("Approvedby")
                        .HasColumnType("uuid")
                        .HasColumnName("approvedby");

                    b.Property<Guid>("Centerid")
                        .HasColumnType("uuid")
                        .HasColumnName("centerid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("Forecastid")
                        .HasColumnType("uuid")
                        .HasColumnName("forecastid");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("Sparepartid")
                        .HasColumnType("uuid")
                        .HasColumnName("sparepartid");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'PENDING'::character varying");

                    b.Property<int?>("Suggestedquantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("suggestedquantity");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Requestid")
                        .HasName("sparepartreplenishmentrequest_pkey");

                    b.HasIndex("Centerid");

                    b.HasIndex("Forecastid");

                    b.HasIndex("Sparepartid");

                    b.ToTable("sparepartreplenishmentrequest", (string)null);
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SpareparttypeTuht", b =>
                {
                    b.Property<Guid>("Typeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("typeid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'ACTIVE'::character varying");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Typeid")
                        .HasName("spareparttype_tuht_pkey");

                    b.ToTable("spareparttype_tuht", (string)null);
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartusagehistoryTuht", b =>
                {
                    b.Property<Guid>("Usageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("usageid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("Centerid")
                        .HasColumnType("uuid")
                        .HasColumnName("centerid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<int>("Quantityused")
                        .HasColumnType("integer")
                        .HasColumnName("quantityused");

                    b.Property<Guid>("Sparepartid")
                        .HasColumnType("uuid")
                        .HasColumnName("sparepartid");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'ACTIVE'::character varying");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("Useddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("useddate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Usageid")
                        .HasName("sparepartusagehistory_tuht_pkey");

                    b.HasIndex("Centerid");

                    b.HasIndex("Sparepartid");

                    b.ToTable("sparepartusagehistory_tuht", (string)null);
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.InventoryTuht", b =>
                {
                    b.HasOne("EV_SCMMS.Core.Domain.Models.Center", "Center")
                        .WithMany("InventoryTuhts")
                        .HasForeignKey("Centerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inventory_tuht_centerid_fkey");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartTuht", b =>
                {
                    b.HasOne("EV_SCMMS.Core.Domain.Models.InventoryTuht", "Inventory")
                        .WithMany("SparepartTuhts")
                        .HasForeignKey("Inventoryid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sparepart_tuht_inventoryid_fkey");

                    b.HasOne("EV_SCMMS.Core.Domain.Models.SpareparttypeTuht", "Type")
                        .WithMany("SparepartTuhts")
                        .HasForeignKey("Typeid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sparepart_tuht_typeid_fkey");

                    b.Navigation("Inventory");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartforecastTuht", b =>
                {
                    b.HasOne("EV_SCMMS.Core.Domain.Models.Center", "Center")
                        .WithMany("SparepartforecastTuhts")
                        .HasForeignKey("Centerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sparepartforecast_tuht_centerid_fkey");

                    b.HasOne("EV_SCMMS.Core.Domain.Models.SparepartTuht", "Sparepart")
                        .WithMany("SparepartforecastTuhts")
                        .HasForeignKey("Sparepartid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sparepartforecast_tuht_sparepartid_fkey");

                    b.Navigation("Center");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.Sparepartreplenishmentrequest", b =>
                {
                    b.HasOne("EV_SCMMS.Core.Domain.Models.Center", "Center")
                        .WithMany("Sparepartreplenishmentrequests")
                        .HasForeignKey("Centerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sparepartreplenishmentrequest_centerid_fkey");

                    b.HasOne("EV_SCMMS.Core.Domain.Models.SparepartforecastTuht", "Forecast")
                        .WithMany("Sparepartreplenishmentrequests")
                        .HasForeignKey("Forecastid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sparepartreplenishmentrequest_forecastid_fkey");

                    b.HasOne("EV_SCMMS.Core.Domain.Models.SparepartTuht", "Sparepart")
                        .WithMany("Sparepartreplenishmentrequests")
                        .HasForeignKey("Sparepartid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sparepartreplenishmentrequest_sparepartid_fkey");

                    b.Navigation("Center");

                    b.Navigation("Forecast");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartusagehistoryTuht", b =>
                {
                    b.HasOne("EV_SCMMS.Core.Domain.Models.Center", "Center")
                        .WithMany("SparepartusagehistoryTuhts")
                        .HasForeignKey("Centerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sparepartusagehistory_tuht_centerid_fkey");

                    b.HasOne("EV_SCMMS.Core.Domain.Models.SparepartTuht", "Sparepart")
                        .WithMany("SparepartusagehistoryTuhts")
                        .HasForeignKey("Sparepartid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sparepartusagehistory_tuht_sparepartid_fkey");

                    b.Navigation("Center");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.Center", b =>
                {
                    b.Navigation("InventoryTuhts");

                    b.Navigation("SparepartforecastTuhts");

                    b.Navigation("Sparepartreplenishmentrequests");

                    b.Navigation("SparepartusagehistoryTuhts");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.InventoryTuht", b =>
                {
                    b.Navigation("SparepartTuhts");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartTuht", b =>
                {
                    b.Navigation("SparepartforecastTuhts");

                    b.Navigation("Sparepartreplenishmentrequests");

                    b.Navigation("SparepartusagehistoryTuhts");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SparepartforecastTuht", b =>
                {
                    b.Navigation("Sparepartreplenishmentrequests");
                });

            modelBuilder.Entity("EV_SCMMS.Core.Domain.Models.SpareparttypeTuht", b =>
                {
                    b.Navigation("SparepartTuhts");
                });
#pragma warning restore 612, 618
        }
    }
}
